sudo: required
services:
- docker
addons:
  apt:
    packages:
    - openconnect
before_install:
- pip install awscli --upgrade --user
- eval $(aws ecr get-login --region us-east-1 --no-include-email)
- curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
- chmod +x ./kubectl
- mv ./kubectl $HOME/kubectl
- openssl aes-256-cbc -K $encrypted_45296aef2e31_key -iv $encrypted_45296aef2e31_iv -in kube.config.enc -out kube.config -d
- mkdir -p $HOME/.kube/ && mv kube.config $HOME/.kube/config
script:
- |
  if [ "$TRAVIS_TAG" == "" ]; then 
    docker build -t 234514569215.dkr.ecr.us-east-1.amazonaws.com/geoserver:$TRAVIS_BRANCH-$TRAVIS_COMMIT . 
    docker push 234514569215.dkr.ecr.us-east-1.amazonaws.com/geoserver:$TRAVIS_BRANCH-$TRAVIS_COMMIT 
  else 
    docker build -t 234514569215.dkr.ecr.us-east-1.amazonaws.com/geoserver:$TRAVIS_TAG . 
    docker push 234514569215.dkr.ecr.us-east-1.amazonaws.com/geoserver:$TRAVIS_TAG

    docker tag 234514569215.dkr.ecr.us-east-1.amazonaws.com/geoserver:latest 234514569215.dkr.ecr.us-east-1.amazonaws.com/geoserver:$TRAVIS_TAG 
    docker push  234514569215.dkr.ecr.us-east-1.amazonaws.com/geoserver:latest 
  fi
after_success:
- echo $VPNPASS | sudo openconnect vpnaccess.nd.edu -b --user=$VPNUSER --passwd-on-stdin
- |
 if [ "$TRAVIS_TAG" == "" ]; then 
    $HOME/kubectl -n development set image deployment/development-cyberspatial-geoserver cyberspatial=234514569215.dkr.ecr.us-east-1.amazonaws.com/geoserver:$TRAVIS_BRANCH-$TRAVIS_COMMIT
  else 
    $HOME/kubectl -n staging set image staging/staging-cyberspatial-geoserver cyberspatial=234514569215.dkr.ecr.us-east-1.amazonaws.com/geoserver:$TRAVIS_TAG
  fi
env:
  global:
  - secure: qVlNpJhKW8kRdDtClRfV1TZHDm9ghSFpCI1gpsV0hxvG4viS9iIDGZ02rhF31YUkqe9cMwl38XS7SL84s/H9hWbKoU6IocVaKR/00D78isQYDiEUVaAbgiLzaqAVSJSjzk1szGb/pBrpPI0TLNPkDwf9fmESQ3KDG3xquxpk4dYpNAcbxUsrDjXKbA+DzERItDpyLfl997QiNKG5ePE+eucc+mUfk4Jf259dFlxVUKn34QkYVoHXu7K4+JFTBTHp9LopM9xBtN0horVGuoT0RNesxnFc1rVS1gOR1iFzI6sQysE+YRzsNPGn2veAIws2ZbtQKCZPV2q+M3WNteazdsKKyRCa6KWH6MX9M7yLNVg+gGjB+mBXvnpoNyY+vOURLCe6RQf4Yy9k8DlVKlBeMM3ZaysKllQjxLqSdMDoIRjU/r/uCwzEQjyIRKJQihqb/P3l60t5/kbzyCuEjRQaY4EY3YTf15gGg5BdwUIMdY61H08s3EAqv+j+RgTfV4Ki3pGTUAp2o1NHcxSG0V8Q/kg5NjheuwSCg8iaeKEbecNYBZRaB1A7zWGGL4whr5VLjEDNR81xZaCGJQMbDZYQ9sOVTLKLWlBHd5HaKbjnOzv7iWAQFiI9wLoFKRvJYA6y9lH0ELpWlXEZ1LtXUqi3fdCn5rz698NHjbUHJJ2oosQ=
  - secure: GrkPkpW0e/VRyhTeAEIlUGwKrn11Tpc/P5x7fOoZ1AB1gvCDU0J6p6gyx86oI7IqUXrgVOqcR2n/Uq05wPHIJP7ddzwN9DK+mQFfg+/PYenM7Vy5UI8o8TnrEso2uY0TFLOemFWfy93EBLrbRR+gaz+UdexKv/yIs+6R7oJLNsRLBcxZ7k2UhkYOlrQAQAeYyulm+j4w9XrJytH9b4PkGTQUFikVYquLzZfKb/Stzne2fPr0zMdX1IAbrr2IrMXivdlGEax8uXPQYfZGDaUiGmt6H2htaGjMiHPbZGIupeg2mZ3OOjty9PzDpcrMJ5hdiBnG90pY44EEk4mvsumQ7cvUQjOPwycSnfxyB0+n2+JGBwst0VfrtFOS8D1cnP9DO56hzGkCsjUyZpWjjbtM88A1bhkSR9AvBg65dYXZlz77wjRqmwvIeD7+uceDCVajEpg+3syjxj3PDWixliRnZjxaoTCzfC0bALtofwy472hO37VU35JTTm4pMxYuuVJERvHzveEhfz/snIvK2VmGRtsHc9v6A3i1FQ6hrxwbEQfFk8AdhDdvyV3m0SFGUNIAz8rLvDp2qPlYfw8qlDMFOAuFv1LLxVy7yAZWUZX79HXTHuHhEwfTlILZDKbWQBVuJns5kGxQVNQAWbxmyss1SSJXUhI6HrAR6XKkgl8F/Cw=
  - secure: Uk3ig5aYxksLQ3H27EjSpQ2gllP11Vo730KqBwAmA8unH0C+TR9qHj2yEuJbjMhGceSuYPn5XMsDX9K1QcB9u1dxaXjkFslcMvMrEyI22AjEuZHUa8aTZgOjPxsgBMFdVK+RaqbcdslYXQjCrZINZHprAzoUXkBDCp0xh3Qp0Vv0oFd1Ip37ax9KdRCdRSgT7AJTCVwON5+g/OT/ZC3KZKI4a+UgL34Bw+k+HVVt8ZBATq2Olwm39gTqgLyPio8jPwacnC5qAEkf9TWnuiW+WX37SqvXnZB6Ed6MRoyZ7RcZefP9VTZOZ5+QMr24Vr8h1/pdkm+aZym43UJ0a/n6ljp04E1l8I5xBnLhSsZ/yBxpgrfoSsH541U87+2ImwSZfXMOJdfpLX63zlTkFWcv24lQOY45IbZoozHpdiqQg90hRITsePQkBKquoE3gQ+8uvNBfWubT/A8WgRjiQ1HuWRCNwKI0M3MPefYaOb0IKySPt9g1kt+ljkydjk0ioir4G5PSd3bf2y+NnAPQhh8lfgVq4VWorEkq5PVMD1b1hAi+Jo/BWPklyvxXZpvC1VxPjre63od3o+c1ml5cVEvXmIX5Af+kGqjlT+flnl8QCguDTQAEGSZNmM0s2DVyITBLh1BziquLpgZSQYX9fA8YAQfKUSt3Pj7HCsWtFv/dcKg=
  - secure: js/Bmp0FUx4bTg0DcfX/xIgsD9InIvme84JWtb/UGubmsvK+3Qt72b/VFAalqVL5IdkZ7/CERLB6LLdSeG52gZMlTXXBcH51hdzZzk8e0I2FiI7IJfeYiSdGF+BuqhQI/Pn5j6hI448tAR+z+DqSzz5ib+RGLQBrQ/Nh6CwTgiEmbL+lgYUOR0/V0ltCcrxgxc5GDsAtzroaW/UQccQnCl7GezIUYpK76hBLRR3V+UBLB9Kv4uViuQ6DP2NrSy6yHT5BOkdOsXsRlZFlIA2YD01g/i+Xy5Qh64y7SLf6xNKbYm+sSJKNY1oP4ffxZR+DiZ71zwP3LC47IOkcObKm4Me9u/7b+GyYOVtew+f0DaTmswKsKoVxZdm8IVfBlud/GnmxNCqjxb1C9OEp7uUpnrmkXLQC9tvnefuMWiqHUoO5NCJGU9FYz1WwbRPlBw28B5i9k8KTI/m20APplhI47bZGTcdY7vcL6fn+eopsVU/PiNR4F76ixyPYU11NWqoDgoEtja/wu6DOQESg0us0w14mHDIrb1gDsOGbW7RORaAcGO6p8NBuqOJNd8jXu9xPgt4rmFqe5tuwJyEsXeCUr/j6CftEG6lNKPhQ84xAlN/nG0DgFGzrKn6BPzUk1tZy4hNBQA7ZSI+k34uQUvad9wv9Cenia1zMpCxa8/Hy4lU=
